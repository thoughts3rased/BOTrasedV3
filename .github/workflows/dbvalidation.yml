name: Validate SSDT Project (Windows Build Container)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  validate-ssdt:
    # Your self-hosted runner (Linux-based myoung34/github-runner on TrueNAS SCALE)
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 1: Build SSDT Project in a Windows Container
      # This step uses a Windows Server Core image with .NET SDK.
      # It will mount your repository's code into the Windows container
      # and then execute the MSBuild command there.
      - name: Build SSDT Project in Windows Container
        run: |
          echo "Starting Windows Docker container for SSDT build..."
          # Use a Windows Server Core image with .NET SDK.
          # We'll use a specific tag to ensure stability.
          # The --workdir sets the working directory inside the container.
          # The -v mounts the current GitHub workspace into the container.
          # The 'cmd /c' is used to run commands on Windows.
          # Replace 'PathToYourSSDTProject/YourSSDTProject.sqlproj' with the actual path.
          docker run --rm \
                     -v "${{ github.workspace }}:C:/src" \
                     mcr.microsoft.com/dotnet/sdk:8.0-windowsservercore-ltsc2019 \
                     cmd /c "cd C:/src/BOTrasedV3/BOTrasedV3/BOTrasedV3.Database && dotnet build BOTrasedV3.Database.sqlproj --configuration Release"
          # Note: The path inside the container will be C:/src/BOTrasedV3/BOTrasedV3/BOTrasedV3.Database/BOTrasedV3.Database.sqlproj
          # Adjust 'C:/src/BOTrasedV3/BOTrasedV3/BOTrasedV3.Database' to match your project's path relative to the repo root.
          # The .dacpac will be created in C:/src/BOTrasedV3/BOTrasedV3/BOTrasedV3.Database/bin/Release/BOTrasedV3.Database.dacpac
          echo "SSDT Project built successfully in Windows container."

      # Step 2: Install SqlPackage CLI Tool (on the Linux runner)
      # SqlPackage is cross-platform, so it can be installed and run on the Linux runner.
      # It will use the .dacpac generated by the Windows container.
      - name: Install SqlPackage CLI Tool
        run: dotnet tool install -g Microsoft.SqlPackage

      - name: Start SQL Server Container for Validation (on the Linux runner)
        # Spin up a temporary SQL Server instance on the Linux host.
        # Adjust SA_PASSWORD for your needs (use GitHub Secrets for production!)
        run: |
          echo "Starting SQL Server container for validation..."
          docker run --name sql_server_validation -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=YourStrongPassword123!" -p 1433:1433 -d mcr.microsoft.com/mssql/server:2022-latest
          echo "Waiting for SQL Server to start..."
          sleep 30 # Give SQL Server time to initialize
          echo "SQL Server container started."

      - name: Run SqlPackage Validation (on the Linux runner)
        run: |
          echo "Running SqlPackage validation..."
          sqlpackage.exe /Action:Validate \
                         /SourceFile:BOTrasedV3/BOTrasedV3/BOTrasedV3.Database/bin/Release/BOTrasedV3.Database.dacpac \
                         /TargetServerName:localhost \
                         /TargetDatabaseName:ValidationDB \
                         /TargetUser:sa \
                         /TargetPassword:YourStrongPassword123! \
                         /p:BlockOnPossibleDataLoss=True \
                         /p:DropObjectsNotInSource=False \
                         /p:IncludeCompositeObjects=True \
                         /p:IgnoreNotForReplication=True \
                         /p:IgnoreColumnOrder=True \
                         /p:IgnoreWithNocheckOnCheckConstraints=True \
                         /p:IgnoreWithNocheckOnForeignKeys=True

          echo "SSDT Project validation completed successfully."

      - name: Stop and Remove SQL Server Container (on the Linux runner)
        # Clean up the temporary container
        if: always() # Ensure this runs even if previous steps fail
        run: |
          echo "Stopping and removing SQL Server container..."
          docker stop sql_server_validation
          docker rm sql_server_validation
          echo "SQL Server container cleaned up."
